- PLAN ---------------------------------------------------------------
Content of the seminar paper
First draft
- logical outline and clear message
- description of topic and challenges with key references
- two pages of readable English text
Second draft
- most of the text and the main ideas, almost final structure
- relevant, authoritative and up-to-date references
- 6–10 pages including figures, tables and references
Final paper
- complete technical content and improved outline
- polished presentation and comprehensive bibliography
- 12–15 pages including figures, tables and references
---------------------------------------------------------------------





A comparison of theorem provers.


== What do we want to discuss / research
Theoretical boundaries of formal systems
	1st order logic
	Goedel's incompleteness theorems
	...
//Theoretical boundaries of automated deduction (in sense of algorithmic computability)
	//show that this is NP-complete problem
	//	[S. A. Cook. The complexity of theorem proving procedures. In Proceedings of the Third Annual ACM Symposium on the Theory of Computing, pages 151–158, 1971]
	//existent algorithms for SAT problem
	//	(1) using truth tables: O(2^n), n - num. of propositional symbols. 
	//		To check whether α is satisfiable, form the truth table for α. If there is a row in which True appears as the value for α, then α is satisfiable. Otherwise, α is unsatisfiable.
	//	(2) converting to CNF: O(2^n)
	//		- [G. Tseitin. On the complexity of derivation in propositional calculus. Studies in Constructive Mathematics and Mathematical Logic, part II, pages 115–125, 1970] http://www.decision-procedures.org/handouts/Tseitin70.pdf
	//		- Davis-Putnam (DP) Algorithm + Davis-Putnam-Logemann-Loveland (DPLL) [Martin Davis, George Logemann, and Donald Loveland. A machine program for theorem proving. Communications of the ACM, 5(7):394–397, July 1962]
	//		
	//? pseudo-code and analyse the algorithms
	//...
Existent realisations of SAT (+SMT?) solvers
	? performance comparison
	built-in theories (in case of SMT)
	...
	
	
Ms Thesis, p. 19 http://tampub.uta.fi/bitstream/handle/10024/97597/GRADU-1435576377.pdf;sequence=1
"It is possible to use formal specifications to analyze the set of all possible states in a
software system. This analysis is usually performed to find out if a formal specification
violates properties such as ***fairness, progress, liveness or safety***. The fairness of a certain state
means that it is not possible to systematically omit that state every time it becomes
available [Kurki-Suonio, 2005]"

	
	
	ЗАГЛЯНУТЬ В КНИЖКУ, КОТ РЕКОМЕНДОВАЛ СТАВРОС
	
	

== Outline

Introduction
	General introduction to formal logic automated provers (briefly 1st and 2nd ordered logic, maybe completenes, Goedel theorems). Then several words about history of development of these methods.
Previous work review (note key papers and implementations)
Paper outline
Proof system from-inside
Comparison of some existing proof systems
	Boyer-Moore Theorem Prover (NQTHM)
	HOL Light
	Coq
Comparison of implementations
Limitations of existing theorem provers (formal logic + execution time)
Conclusion
	what was compared
	who won
	what does it mean practically

	
	
ONCE AGAIN

1. Introduction
	- discuss problem, why do we need it
	- briefly: General introduction to formal logic automated provers (1st and 2nd ordered logic, maybe completenes, Goedel theorems).
		- several words about history of development of these methods.
	- basics of theorem provers (not comparison)
		- perhaps, algorithms in pseudo-code
		- perhaps, sat/smt as another type + other types of automated reasoning (AI?)
	- limitations
		- principal (theoretical, due to formal logic limitations)
		- computable limitations (NP?)
2. Comparison of TP <Coq VS Isabelle>
	- Coq
		- main ideas, history
			- Curry–Howard correspondence
	- Isabelle
		- <same>
		
	= Properties:
		- Functional:
			- set of axioms (prob. extendable)
			- set of reasoning rules
			- reasoning algoritms (rules of inference?) <describe in pseudo-code; see proof tree (?) >
			- expressional power <find examples when in one TP proof is long, and in other it is short >
			- try to express differences in requirements to proofs in different TPs
		- Usability:
			- exetent of automation
			- UI stuff
			- computer resources consumption

3. Results
	

in Isabelle/HOL tutorial (https://isabelle.in.tum.de/doc/tutorial.pdf) in section 10 there is an example with crypto protocol proof.
	- есть готовые для HOL: http://www.cl.cam.ac.uk/research/hvg/Isabelle/dist/library/HOL/HOL-Auth/index.html
	
NOTES:
- Логическое программирование - то же? + prolog
- intro: " История знает множество случаев, когда переполнение счетчика или необработанное исключение приводило к большим материальным затратам и человеческим жертвам. Так, например, 4 июня 1996 года европейская ракета-носитель «Ariane 5» буквально развалилась на части на 39-й секунде полета. Анализ инцидента показал, что авария произошла из-за ошибки в программном обеспечении. Ущерб составил около $7 млрд. В феврале 1991 года ракета «Patriot» промахнулась мимо цели из-за ошибки округления, успела пролететь лишние 500 метров. Ущерб: 28 убитых и более сотни раненых. Подобного рода ошибки встречаются и в аппаратном обеспечении. Недавний баг в процессорах Pentium, связанный с неправильным делением чисел с плавающей точкой, вынудил Intel пойти на замену бракованных чипов. Эта ошибка стоила компании $475 млн." https://habrahabr.ru/post/182442/
- list: https://github.com/johnyf/tool_lists/blob/master/verification_synthesis.md#theorem-provers
- page 79:  https://www.math.wisc.edu/~miller/old/m771-10/kunen770.pdf



== from http://docplayer.net/46796974-Computer-aided-proofs-and-their-significance.html =======================================================================================
-----------------------
Trusted Core (TC) = basic proof checker with a small, transparent code. Tested extensively, much m o r e than the mind of an individual mathematician could ever b e. Tradeo ff - it is infeasible t o write all the proofs in a script acceptable b y TC (elementa r y proofs). Expansions of TC a r e needed: tactics (rules), decision procedures. 

Pro o f assistants a r e considered safe, if they p r oduce a n elementary p r o o f checked b y the trusted c ore. 
------------------------------------------------------------------------------------------------------------------------

Coq, INRIA, is based o n Coquand’s Calculus o f Inductive Constructions (1985), extension of Girard’s p olymo rphic λ-calculus Fω. Its main goal was specifi- cation and verification of p rograms. Coq’s basic logic is intuitionistic, and it includes a mechanism fo r automatic generation of certified p rograms from p r o ofs of their specifications Co q is widely used fo r fo rmalization of mathematics: real analysis, constructive category theory, elements of constructive geometry, group theory, domain theory, fundamental group theory. A recent success story: formalization and verification o f a p r o o f o f the Four Colo r Theorem (1999/2004). 

Isabelle (started in 1986, Larry P aulson, Cambridge Universit y, and Tobias Nipk o w, T U Munich), rather a logical framew ork (“generic p r o o f assistant”), not tightly bound to one s pecific logic. Meta-logic is intutionistic higher-order logic with equality; di fferent logical systems can b e defined: HOL, F OL, ZF, HOL with Scott’s Logic fo r Computable Functions (domain theory) added, small fragment o f Martin-L¨of’s Ty p e Theory (ITT), Barendregt’s Lambda Cub e, and others. Large theo r y library: elementary numb e r theo r y (fo r example, Gauss’s la w of quadratic reciprocity), analysis (basic properties of limits, derivatives, and integrals), algebra (up to Sylo w’s theorem), and set theory (the relative consistency o f the Axiom o f Choice), the Prime Numb e r Theorem. 

------------------------------------------------------------------------------------------------------------------------
==============================================================================================================================================================================



REFERENCES (pre):
'Comparing mathematical provers' https://www.cs.ru.nl/~freek/comparison/diffs.pdf
'An Experimental Comparison of Theorem Provers for CTL' http://users.cecs.anu.edu.au/~rpg/Publications/TIME2011/time2011.pdf
'A Qualitative Comparison of the Suitability of Four Theorem Provers for Basic Auction Theory' https://arxiv.org/pdf/1303.4193.pdf
//nonfree: 'Comparison of Theorem Provers for Modal Logics — Introduction and Summary' https://link.springer.com/chapter/10.1007%2F3-540-69778-0_4?LI=true




 
// QUESTIONS 
- I don't fully understand, why  "[| P; Q |] ==> T" equals to "P ==> Q ==> T", ведь импликация лево-ассоциотивна, т.е. "P ==> Q ==> T" равно "P ==> (Q ==> T)"
- и вообще, почему про импликацию "A -> B" думают как "если А, то В" -- Ведь В будет правдой даже если не-А?
- cannot understand what are co-inductive typed - used in Coq (CoInductive)
	http://www.lorentzcenter.nl/lc/web/2014/603/presentations/Geuvers.pdf
	wiki
//- lambda-cube 
- I have investigated a bit on how model checking is being implemented for different proof systems, and I understood that 1) as you told on our first meeting, we need to use temporal logic to describe semantics of imperative programs, and 2) constructing the logical model for a program manually is rather tedious and, more importantly, error-prone, so I cannot appeal to the *verified* corresponence between manually-built program and manually-constructed model, in this case, we need to have a reliable tool to automatically construct such a model
- WHat real profit gives us the Coq's Calculus of Constructions?


To Mr Rybicki:
	- do we need to use 'lemmata' instead of 'lemmas' as 'formulae' instead of 'formulas' ?
