
Query commands should not be inserted in scripts
Nat.le_add_r: forall n m : nat, n <= n + m
le_plus_l: forall n m : nat, n <= n + m
le_plus_r: forall n m : nat, m <= n + m
Nat.add_0_r: forall n : nat, n + 0 = n
plus_n_O: forall n : nat, n = n + 0
Nat.add_0_l: forall n : nat, 0 + n = n
plus_O_n: forall n : nat, 0 + n = n
Nat.add_comm: forall n m : nat, n + m = m + n
Nat.sub_add_le: forall n m : nat, n <= n - m + m
minus_plus: forall n m : nat, n + m - n = m
le_plus_trans: forall n m p : nat, n <= m -> n <= m + p
lt_plus_trans: forall n m p : nat, n < m -> n < m + p
Nat.add_sub: forall n m : nat, n + m - m = n
Nat.lt_lt_add_r: forall n m p : nat, n < m -> n < m + p
plus_tail_plus: forall n m : nat, n + m = tail_plus n m
Nat.lt_lt_add_l: forall n m p : nat, n < m -> n < p + m
Nat.lt_add_pos_r: forall n m : nat, 0 < n -> m < m + n
Nat.add_pos_l: forall n m : nat, 0 < n -> 0 < n + m
Nat.add_pos_r: forall n m : nat, 0 < m -> 0 < n + m
Nat.lt_add_pos_l: forall n m : nat, 0 < n -> m < n + m
le_Pmult_nat: forall (p : positive) (n : nat), n <= Pos.iter_op Init.Nat.add p n
Nat.add_1_l: forall n : nat, 1 + n = S n
Nat.add_1_r: forall n : nat, n + 1 = S n
plus_le_compat_r: forall n m p : nat, n <= m -> n + p <= m + p
plus_le_compat_l: forall n m p : nat, n <= m -> p + n <= p + m
plus_lt_compat_r: forall n m p : nat, n < m -> n + p < m + p
Nat.gcd_add_diag_r: forall n m : nat, Nat.gcd n (m + n) = Nat.gcd n m
plus_gt_compat_l: forall n m p : nat, n > m -> p + n > p + m
plus_lt_compat_l: forall n m p : nat, n < m -> p + n < p + m
plus_gt_reg_l: forall n m p : nat, p + n > p + m -> n > m
plus_le_reg_l: forall n m p : nat, p + n <= p + m -> n <= m
plus_lt_reg_l: forall n m p : nat, p + n < p + m -> n < m
plus_Sn_m: forall n m : nat, S n + m = S (n + m)
Nat.add_succ_comm: forall n m : nat, S n + m = n + S m
Nat.add_succ_r: forall n m : nat, n + S m = S (n + m)
plus_n_Sm: forall n m : nat, S (n + m) = n + S m
ZL0: 2 = 1 + 1
Nat.add_succ_l: forall n m : nat, S n + m = S (n + m)
plus_Snm_nSm: forall n m : nat, S n + m = n + S m
Nat.succ_add_discr: forall n m : nat, m <> S (n + m)
succ_plus_discr: forall n m : nat, n <> S (m + n)
plus_reg_l: forall n m p : nat, p + n = p + m -> n = m
Nat.add_shuffle0: forall n m p : nat, n + m + p = n + p + m
Nat.sqrt_up_add_le: forall a b : nat, Nat.sqrt_up (a + b) <= Nat.sqrt_up a + Nat.sqrt_up b
Nat.divide_add_cancel_r: forall n m p : nat, Nat.divide n m -> Nat.divide n (m + p) -> Nat.divide n p
Nat.divide_add_r: forall n m p : nat, Nat.divide n m -> Nat.divide n p -> Nat.divide n (m + p)
plus_assoc_reverse: forall n m p : nat, n + m + p = n + (m + p)
Nat.add_shuffle3: forall n m p : nat, n + (m + p) = m + (n + p)
Nat.sqrt_add_le: forall a b : nat, Nat.sqrt (a + b) <= Nat.sqrt a + Nat.sqrt b
Nat.add_assoc: forall n m p : nat, n + (m + p) = n + m + p
PeanoNat.Nat.add_wd_obligation_1: Morphisms.respectful eq (Morphisms.respectful eq eq) Init.Nat.add Init.Nat.add
Nat.le_add_le_sub_l: forall n m p : nat, n + p <= m -> p <= m - n
Nat.add_nonneg_nonneg: forall n m : nat, 0 <= n -> 0 <= m -> 0 <= n + m
Nat.lt_sub_lt_add_l: forall n m p : nat, n - m < p -> n < m + p
Nat.lt_sub_lt_add_r: forall n m p : nat, n - p < m -> n < m + p
Nat.add_pos_pos: forall n m : nat, 0 < n -> 0 < m -> 0 < n + m
Nat.le_add_le_sub_r: forall n m p : nat, n + p <= m -> n <= m - p
ArithRing.natSRth: Ring_theory.semi_ring_theory 0 1 Init.Nat.add Init.Nat.mul eq
Nat.add_lt_mono_r: forall n m p : nat, n < m <-> n + p < m + p
Nat.add_le_mono_r: forall n m p : nat, n <= m <-> n + p <= m + p
Nat.add_le_mono_l: forall n m p : nat, n <= m <-> p + n <= p + m
Nat.add_lt_mono_l: forall n m p : nat, n < m <-> p + n < p + m
Nat.shiftl_shiftl: forall a n m : nat, Nat.shiftl (Nat.shiftl a n) m = Nat.shiftl a (n + m)
mult_n_Sm: forall n m : nat, n * m + n = n * S m
Nat.mul_succ_l: forall n m : nat, S n * m = n * m + m
Nat.shiftr_shiftr: forall a n m : nat, Nat.shiftr (Nat.shiftr a n) m = Nat.shiftr a (n + m)
plus_minus: forall n m p : nat, n = m + p -> p = n - m
minus_plus_simpl_l_reverse: forall n m p : nat, n - m = p + n - (p + m)
le_plus_minus_r: forall n m : nat, n <= m -> n + (m - n) = m
Nat.add_sub_eq_r: forall n m p : nat, m + p = n -> n - p = m
Nat.add_sub_eq_l: forall n m p : nat, m + p = n -> n - m = p
Nat.sub_add_distr: forall n m p : nat, n - (m + p) = n - m - p
Nat.mul_succ_r: forall n m : nat, n * S m = n * m + n
Nat.sub_add: forall n m : nat, n <= m -> m - n + n = m
le_plus_minus: forall n m : nat, n <= m -> m = n + (m - n)
mult_acc_aux: forall n m p : nat, m + n * p = mult_acc m p n
Nat.add_pos_nonneg: forall n m : nat, 0 < n -> 0 <= m -> 0 < n + m
Nat.add_nonneg_pos: forall n m : nat, 0 <= n -> 0 < m -> 0 < n + m
Nat.add_cancel_l: forall n m p : nat, p + n = p + m <-> n = m
Nat.add_cancel_r: forall n m p : nat, n + p = m + p <-> n = m
Nat.add_neg_cases: forall n m : nat, n + m < 0 -> n < 0 \/ m < 0
Nat.add_nonneg_cases: forall n m : nat, 0 <= n + m -> 0 <= n \/ 0 <= m
Nat.lt_add_lt_sub_r: forall n m p : nat, n + p < m <-> n < m - p
Nat.add_pos_cases: forall n m : nat, 0 < n + m -> 0 < n \/ 0 < m
Nat.le_sub_le_add_r: forall n m p : nat, n - p <= m <-> n <= m + p
Nat.lt_add_lt_sub_l: forall n m p : nat, n + p < m <-> p < m - n
Nat.add_nonpos_cases: forall n m : nat, n + m <= 0 -> n <= 0 \/ m <= 0
Nat.le_le_add_le: forall n m p q : nat, n <= m -> p + m <= q + n -> p <= q
plus_le_compat: forall n m p q : nat, n <= m -> p <= q -> n + p <= m + q
plus_lt_compat: forall n m p q : nat, n < m -> p < q -> n + p < m + q
Nat.add_le_mono: forall n m p q : nat, n <= m -> p <= q -> n + p <= m + q
Nat.le_sub_le_add_l: forall n m p : nat, n - m <= p <-> n <= m + p
Nat.add_lt_mono: forall n m p q : nat, n < m -> p < q -> n + p < m + q
Min.plus_min_distr_r: forall n m p : nat, Nat.min (n + p) (m + p) = Nat.min n m + p
Max.plus_max_distr_l: forall n m p : nat, Nat.max (p + n) (p + m) = p + Nat.max n m
Nat.add_min_distr_r: forall n m p : nat, Nat.min (n + p) (m + p) = Nat.min n m + p
Nat.odd_add_even: forall n m : nat, Nat.Even m -> Nat.odd (n + m) = Nat.odd n
Max.plus_max_distr_r: forall n m p : nat, Nat.max (n + p) (m + p) = Nat.max n m + p
Nat.add_max_distr_l: forall n m p : nat, Nat.max (p + n) (p + m) = p + Nat.max n m
Nat.mul_add_distr_l: forall n m p : nat, n * (m + p) = n * m + n * p
Nat.gcd_add_mult_diag_r: forall n m p : nat, Nat.gcd n (m + p * n) = Nat.gcd n m
Nat.even_add_even: forall n m : nat, Nat.Even m -> Nat.even (n + m) = Nat.even n
Nat.add_min_distr_l: forall n m p : nat, Nat.min (p + n) (p + m) = p + Nat.min n m
Nat.add_max_distr_r: forall n m p : nat, Nat.max (n + p) (m + p) = Nat.max n m + p
Min.plus_min_distr_l: forall n m p : nat, Nat.min (p + n) (p + m) = p + Nat.min n m
Nat.mul_add_distr_r: forall n m p : nat, (n + m) * p = n * p + m * p
Nnat.N2Nat.inj_add: forall a a' : N, N.to_nat (a + a') = N.to_nat a + N.to_nat a'
Pos2Nat.inj_add: forall p q : positive, Pos.to_nat (p + q) = Pos.to_nat p + Pos.to_nat q
Nnat.Nat2N.inj_add: forall n n' : nat, N.of_nat (n + n') = (N.of_nat n + N.of_nat n')%N
Nat.even_add: forall n m : nat, Nat.even (n + m) = Bool.eqb (Nat.even n) (Nat.even m)
nth_member_lemma: forall a_0 d n : nat, nth_member a_0 d (S n) = d + nth_member a_0 d n
Nat2Z.inj_add: forall n m : nat, Z.of_nat (n + m) = (Z.of_nat n + Z.of_nat m)%Z
Nat.odd_add: forall n m : nat, Nat.odd (n + m) = xorb (Nat.odd n) (Nat.odd m)
Pmult_nat_mult: forall (p : positive) (n : nat), Pos.iter_op Init.Nat.add p n = Pos.to_nat p * n
plus_le_lt_compat: forall n m p q : nat, n <= m -> p < q -> n + p < m + q
Nat.add_shuffle2: forall n m p q : nat, n + m + (p + q) = n + q + (m + p)
Nat.add_shuffle1: forall n m p q : nat, n + m + (p + q) = n + p + (m + q)
plus_lt_le_compat: forall n m p q : nat, n < m -> p <= q -> n + p < m + q
Nat.le_lt_add_lt: forall n m p q : nat, n <= m -> p + m < q + n -> p < q
Nat.add_le_lt_mono: forall n m p q : nat, n <= m -> p < q -> n + p < m + q
Nat.add_lt_le_mono: forall n m p q : nat, n < m -> p <= q -> n + p < m + q
f_equal2_plus: forall x1 y1 x2 y2 : nat, x1 = y1 -> x2 = y2 -> x1 + x2 = y1 + y2
Nat.lt_le_add_lt: forall n m p q : nat, n < m -> p + m <= q + n -> p < q
plus_is_O: forall n m : nat, n + m = 0 -> n = 0 /\ m = 0
Nat.shiftl_spec_alt: forall a n m : nat, Nat.testbit (Nat.shiftl a n) (m + n) = Nat.testbit a m
Nat.shiftr_spec': forall a n m : nat, Nat.testbit (Nat.shiftr a n) m = Nat.testbit a (m + n)
Nat.shiftr_specif: forall a n m : nat, Nat.testbit (Nat.shiftr a n) m = Nat.testbit a (m + n)
Nat.pow_add_r: forall a b c : nat, a ^ (b + c) = a ^ b * a ^ c
Nat.add_le_cases: forall n m p q : nat, n + m <= p + q -> n <= p \/ m <= q
Nat.add_lt_cases: forall n m p q : nat, n + m < p + q -> n < p \/ m < q
Nat.add_nocarry_lxor: forall a b : nat, Nat.land a b = 0 -> a + b = Nat.lxor a b
Nat.add_wd: Morphisms.Proper (Morphisms.respectful eq (Morphisms.respectful eq eq)) Init.Nat.add
Pmult_nat_succ_morphism:
  forall (p : positive) (n : nat), Pos.iter_op Init.Nat.add (Pos.succ p) n = n + Pos.iter_op Init.Nat.add p n
Nat.add_sub_swap: forall n m p : nat, p <= n -> n + m - p = n - p + m
Nat.add_sub_assoc: forall n m p : nat, p <= m -> n + (m - p) = n + m - p
Nat.eq_add_0: forall n m : nat, n + m = 0 <-> n = 0 /\ m = 0
Nat.add_pred_r: forall n m : nat, m <> 0 -> n + Nat.pred m = Nat.pred (n + m)
Nat.add_lnot_diag_low: forall a n : nat, Nat.log2 a < n -> a + Nat.lnot a n = Nat.ones n
Nat.add_bit0: forall a b : nat, Nat.testbit (a + b) 0 = xorb (Nat.testbit a 0) (Nat.testbit b 0)
Nat.add_pred_l: forall n m : nat, n <> 0 -> Nat.pred n + m = Nat.pred (n + m)
Pmult_nat_r_plus_morphism:
  forall (p : positive) (n : nat),
  Pos.iter_op Init.Nat.add p (n + n) = Pos.iter_op Init.Nat.add p n + Pos.iter_op Init.Nat.add p n
Zabs2Nat.inj_add_abs: forall n m : Z, Z.abs_nat (Z.abs n + Z.abs m) = Z.abs_nat n + Z.abs_nat m
Nat.even_add_mul_even: forall n m p : nat, Nat.Even m -> Nat.even (n + m * p) = Nat.even n
Nat.odd_add_mul_even: forall n m p : nat, Nat.Even m -> Nat.odd (n + m * p) = Nat.odd n
Nat.odd_add_mul_2: forall n m : nat, Nat.odd (n + 2 * m) = Nat.odd n
Nat.add_dichotomy: forall n m : nat, (exists p : nat, p + n = m) \/ (exists p : nat, p + m = n)
ZL6: forall p : positive, Pos.iter_op Init.Nat.add p 2 = Pos.to_nat p + Pos.to_nat p
Nat.even_add_mul_2: forall n m : nat, Nat.even (n + 2 * m) = Nat.even n
List.seq_nth: forall len start n d : nat, n < len -> List.nth n (List.seq start len) d = start + n
Nat.log2_shiftl: forall a n : nat, a <> 0 -> Nat.log2 (Nat.shiftl a n) = Nat.log2 a + n
Nat.log2_up_mul_above:
  forall a b : nat, 0 <= a -> 0 <= b -> Nat.log2_up (a * b) <= Nat.log2_up a + Nat.log2_up b
Nat.add_sqrt_le: forall a b : nat, Nat.sqrt a + Nat.sqrt b <= Nat.sqrt (2 * (a + b))
Nat.add_le_mul: forall a b : nat, 1 < a -> 1 < b -> a + b <= a * b
Nat.le_exists_sub: forall n m : nat, n <= m -> exists p : nat, m = p + n /\ 0 <= p
Nat.testbit_odd_0: forall a : nat, Nat.testbit (2 * a + 1) 0 = true
Nat.add_sub_eq_nz: forall n m p : nat, p <> 0 -> n - m = p -> m + p = n
List.app_length: forall (A : Type) (l l' : list A), length (l ++ l') = length l + length l'
Nat.div2_odd: forall a : nat, a = 2 * Nat.div2 a + Nat.b2n (Nat.odd a)
Nat.double_above: forall n m : nat, n < m -> 2 * n + 1 < 2 * m
Pmult_nat_l_plus_morphism:
  forall (p q : positive) (n : nat),
  Pos.iter_op Init.Nat.add (p + q) n = Pos.iter_op Init.Nat.add p n + Pos.iter_op Init.Nat.add q n
Nat.mul_2_mono_l: forall n m : nat, n < m -> 1 + 2 * n < 2 * m
Nat.add_b2n_double_bit0: forall (a0 : bool) (a : nat), Nat.testbit (Nat.b2n a0 + 2 * a) 0 = a0
Nat.div_unique: forall a b q r : nat, r < b -> a = b * q + r -> q = a / b
Nat.crossmul_le_addsquare: forall a b : nat, 0 <= a -> 0 <= b -> b * a + a * b <= a * a + b * b
Pmult_nat_plus_carry_morphism:
  forall (p q : positive) (n : nat),
  Pos.iter_op Init.Nat.add (Pos.add_carry p q) n = n + Pos.iter_op Init.Nat.add (p + q) n
Nat.testbit_0_r: forall (a : nat) (b : bool), Nat.testbit (2 * a + Nat.b2n b) 0 = b
Nat.log2_mul_below: forall a b : nat, 0 < a -> 0 < b -> Nat.log2 a + Nat.log2 b <= Nat.log2 (a * b)
odd_even_lem: forall p q : nat, 2 * p + 1 <> 2 * q
Nat.mod_unique: forall a b q r : nat, r < b -> a = b * q + r -> r = a mod b
Nat.add_square_le: forall a b : nat, 0 <= a -> 0 <= b -> a * a + b * b <= (a + b) * (a + b)
Nat.add_mod_idemp_l: forall a b n : nat, n <> 0 -> (a mod n + b) mod n = (a + b) mod n
Nat.add_mod_idemp_r: forall a b n : nat, n <> 0 -> (a + b mod n) mod n = (a + b) mod n
Nat.shiftr_spec: forall a n m : nat, 0 <= m -> Nat.testbit (Nat.shiftr a n) m = Nat.testbit a (m + n)
Nat.mod_add: forall a b c : nat, c <> 0 -> (a + b * c) mod c = a mod c
List.in_seq: forall len start n : nat, List.In n (List.seq start len) <-> start <= n < start + len
Nat.double_below: forall n m : nat, n <= m -> 2 * n < 2 * m + 1
Nat.div_mod: forall x y : nat, y <> 0 -> x = y * (x / y) + x mod y
Nat.testbit_odd_succ': forall a n : nat, Nat.testbit (2 * a + 1) (S n) = Nat.testbit a n
Nat.pow_add_lower: forall a b c : nat, c <> 0 -> a ^ c + b ^ c <= (a + b) ^ c
Nat.log2_succ_double: forall a : nat, 0 < a -> Nat.log2 (2 * a + 1) = S (Nat.log2 a)
Nat.div_add_l: forall a b c : nat, b <> 0 -> (a * b + c) / b = a + c / b
Nat.add_b2n_double_div2: forall (a0 : bool) (a : nat), (Nat.b2n a0 + 2 * a) / 2 = a
Z2Nat.inj_add: forall n m : Z, (0 <= n)%Z -> (0 <= m)%Z -> Z.to_nat (n + m) = Z.to_nat n + Z.to_nat m
Zabs2Nat.inj_add: forall n m : Z, (0 <= n)%Z -> (0 <= m)%Z -> Z.abs_nat (n + m) = Z.abs_nat n + Z.abs_nat m
Nat.ones_add: forall n m : nat, Nat.ones (m + n) = 2 ^ m * Nat.ones n + Nat.ones m
Nat.div_add: forall a b c : nat, c <> 0 -> (a + b * c) / c = a / c + b
Nat.add_mod: forall a b n : nat, n <> 0 -> (a + b) mod n = (a mod n + b mod n) mod n
Nat.exists_div2: forall a : nat, exists (a' : nat) (b : bool), a = 2 * a' + Nat.b2n b
Nat.log2_mul_above: forall a b : nat, 0 <= a -> 0 <= b -> Nat.log2 (a * b) <= Nat.log2 a + Nat.log2 b + 1
Nat.log2_up_mul_below:
  forall a b : nat, 0 < a -> 0 < b -> Nat.log2_up a + Nat.log2_up b <= S (Nat.log2_up (a * b))
Nat.add3_bit0:
  forall a b c : nat,
  Nat.testbit (a + b + c) 0 = xorb (xorb (Nat.testbit a 0) (Nat.testbit b 0)) (Nat.testbit c 0)
Nat.mul_pow2_bits_add: forall a n m : nat, Nat.testbit (a * 2 ^ n) (m + n) = Nat.testbit a m
Nat.div_pow2_bits: forall a n m : nat, Nat.testbit (a / 2 ^ n) m = Nat.testbit a (m + n)
Nat.add_log2_up_lt: forall a b : nat, 0 < a -> 0 < b -> Nat.log2_up a + Nat.log2_up b < 2 * Nat.log2_up (a + b)
Nat.add_log2_lt: forall a b : nat, 0 < a -> 0 < b -> Nat.log2 a + Nat.log2 b < 2 * Nat.log2 (a + b)
Nat.testbit_succ_r:
  forall (a : nat) (b : bool) (n : nat), Nat.testbit (2 * a + Nat.b2n b) (S n) = Nat.testbit a n
nat_rect_plus:
  forall (n m : nat) (A : Type) (f : A -> A) (x : A),
  nat_rect (fun _ : nat => A) x (fun _ : nat => f) (n + m) =
  nat_rect (fun _ : nat => A) (nat_rect (fun _ : nat => A) x (fun _ : nat => f) m) (fun _ : nat => f) n
Pos.gcdn_greatest:
  forall (n : nat) (a b : positive),
  Pos.size_nat a + Pos.size_nat b <= n ->
  forall p : positive, (p | a)%positive -> (p | b)%positive -> (p | Pos.gcdn n a b)%positive
Nat.add_sqrt_up_le:
  forall a b : nat, 0 <= a -> 0 <= b -> Nat.sqrt_up a + Nat.sqrt_up b <= S (Nat.sqrt_up (2 * (a + b)))
Nat.testbit_odd_succ: forall a n : nat, 0 <= n -> Nat.testbit (2 * a + 1) (S n) = Nat.testbit a n
Nat.square_add_le: forall a b : nat, 0 <= a -> 0 <= b -> (a + b) * (a + b) <= 2 * (a * a + b * b)
Nat2Pos.inj_add:
  forall n m : nat, n <> 0 -> m <> 0 -> Pos.of_nat (n + m) = (Pos.of_nat n + Pos.of_nat m)%positive
List.firstn_app_2:
  forall (A : Type) (n : nat) (l1 l2 : list A),
  List.firstn (length l1 + n) (l1 ++ l2) = (l1 ++ List.firstn n l2)%list
Nat.quadmul_le_squareadd: forall a b : nat, 0 <= a -> 0 <= b -> 2 * 2 * a * b <= (a + b) * (a + b)
Nat.log2_up_succ_double: forall a : nat, 0 < a -> Nat.log2_up (2 * a + 1) = 2 + Nat.log2 a
Nat.log2_up_add_le: forall a b : nat, a <> 1 -> b <> 1 -> Nat.log2_up (a + b) <= Nat.log2_up a + Nat.log2_up b
Nat.log2_add_le: forall a b : nat, a <> 1 -> b <> 1 -> Nat.log2 (a + b) <= Nat.log2 a + Nat.log2 b
Nat.mul_lt_pred: forall p q n m : nat, S p = q -> p * n < p * m <-> q * n + m < q * m + n
Nat.eq_add_1: forall n m : nat, n + m = 1 -> n = 1 /\ m = 0 \/ n = 0 /\ m = 1
plus_is_one: forall m n : nat, m + n = 1 -> {m = 0 /\ n = 1} + {m = 1 /\ n = 0}
ArithRing.nat_morph_N:
  Ring_theory.semi_morph 0 1 Init.Nat.add Init.Nat.mul eq 0%N 1%N N.add N.mul N.eqb N.to_nat
Nat.log2_up_mul_pow2: forall a b : nat, 0 < a -> 0 <= b -> Nat.log2_up (a * 2 ^ b) = b + Nat.log2_up a
Nat.log2_mul_pow2: forall a b : nat, 0 < a -> 0 <= b -> Nat.log2 (a * 2 ^ b) = b + Nat.log2 a
Nat.div_mod_unique:
  forall b q1 q2 r1 r2 : nat, r1 < b -> r2 < b -> b * q1 + r1 = b * q2 + r2 -> q1 = q2 /\ r1 = r2
Nat.eq_add_succ:
  forall n m : nat, (exists p : nat, n + m = S p) <-> (exists n' : nat, n = S n') \/ (exists m' : nat, m = S m')
Nat.add_bit1:
  forall a b : nat,
  Nat.testbit (a + b) 1 = xorb (xorb (Nat.testbit a 1) (Nat.testbit b 1)) (Nat.testbit a 0 && Nat.testbit b 0)
Nat.mod_mul_r: forall a b c : nat, b <> 0 -> c <> 0 -> a mod (b * c) = a mod b + b * ((a / b) mod c)
Nat.add3_bits_div2:
  forall a0 b0 c0 : bool, (Nat.b2n a0 + Nat.b2n b0 + Nat.b2n c0) / 2 = Nat.b2n (a0 && b0 || c0 && (a0 || b0))
Nat.pow_add_upper: forall a b c : nat, c <> 0 -> (a + b) ^ c <= 2 ^ Nat.pred c * (a ^ c + b ^ c)
Nat.add_nocarry_mod_lt_pow2: forall a b n : nat, Nat.land a b = 0 -> a mod 2 ^ n + b mod 2 ^ n < 2 ^ n
Nat.add_nocarry_lt_pow2: forall a b n : nat, Nat.land a b = 0 -> a < 2 ^ n -> b < 2 ^ n -> a + b < 2 ^ n
Nat.log2_unique': forall a b c : nat, 0 <= b -> 0 <= c < 2 ^ b -> a = 2 ^ b + c -> Nat.log2 a = b
Nat.log2_spec_alt: forall a : nat, 0 < a -> exists r : nat, a = 2 ^ Nat.log2 a + r /\ 0 <= r < 2 ^ Nat.log2 a
List.partition_length:
  forall (A : Type) (f : A -> bool) (l l1 l2 : list A),
  List.partition f l = (l1, l2) -> length l = length l1 + length l2
Nat.testbit_unique:
  forall (a n : nat) (a0 : bool) (l h : nat),
  l < 2 ^ n -> a = l + (Nat.b2n a0 + 2 * h) * 2 ^ n -> Nat.testbit a n = a0
Nat.divmod_spec:
  forall x y q u : nat,
  u <= y -> let (q', u') := Nat.divmod x y q u in x + S y * q + (y - u) = S y * q' + (y - u') /\ u' <= y
Nat.sqrt_iter_spec:
  forall k p q r : nat,
  q = p + p -> r <= q -> let s := Nat.sqrt_iter k p q r in s * s <= k + p * p + (q - r) < S s * S s
Nat.add_carry_div2:
  forall (a b : nat) (c0 : bool),
  (a + b + Nat.b2n c0) / 2 =
  a / 2 + b / 2 + Nat.b2n (Nat.testbit a 0 && Nat.testbit b 0 || c0 && (Nat.testbit a 0 || Nat.testbit b 0))
Nat.testbit_spec:
  forall a n : nat, exists l h : nat, 0 <= l < 2 ^ n /\ a = l + (Nat.b2n (Nat.testbit a n) + 2 * h) * 2 ^ n
Nat.add_carry_bits:
  forall (a b : nat) (c0 : bool),
  exists c : nat,
    a + b + Nat.b2n c0 = Nat.lxor (Nat.lxor a b) c /\
    c / 2 = Nat.lor (Nat.land a b) (Nat.land c (Nat.lor a b)) /\ Nat.testbit c 0 = c0
Nat.log2_iter_spec:
  forall k p q r : nat,
  2 ^ S p = q + S r -> r < 2 ^ p -> let s := Nat.log2_iter k p q r in 2 ^ s <= k + q < 2 ^ S s
ArithRing.natr_ring_lemma2:
  forall (n : nat) (lH : list (Ring_polynom.PExpr N * Ring_polynom.PExpr N)) (l : list nat),
  Ring_polynom.interp_PElist 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) eq N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l lH ->
  forall lmp : list (N * Ring_polynom.Mon * Ring_polynom.Pol N),
  Ring_polynom.mk_monpol_list 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl lH = lmp ->
  forall (pe : Ring_polynom.PExpr N) (npe : Ring_polynom.Pol N),
  Ring_polynom.norm_subst 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl n lmp pe = npe ->
  Ring_polynom.PEeval 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l pe =
  Ring_polynom.Pphi_dev 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) 0%N 1%N N.eqb N.to_nat (Ring_theory.get_sign_None (C:=N)) l npe
ArithRing.natr_ring_lemma1:
  forall (n : nat) (l : list nat) (lpe : list (Ring_polynom.PExpr N * Ring_polynom.PExpr N))
    (pe1 pe2 : Ring_polynom.PExpr N),
  Ring_polynom.interp_PElist 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) eq N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l lpe ->
  (let lmp := Ring_polynom.mk_monpol_list 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl lpe in
   Ring_polynom.Peq N.eqb
     (Ring_polynom.norm_subst 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl n lmp pe1)
     (Ring_polynom.norm_subst 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl n lmp pe2)) = true ->
  Ring_polynom.PEeval 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l pe1 =
  Ring_polynom.PEeval 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l pe2
