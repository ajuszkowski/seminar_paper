
Query commands should not be inserted in scripts
Nat.divide_factor_r: forall n m : nat, Nat.divide n (m * n)
Nat.divide_factor_l: forall n m : nat, Nat.divide n (n * m)
Nat.square_nonneg: forall a : nat, 0 <= a * a
Nat.mul_0_r: forall n : nat, n * 0 = 0
Nat.mul_0_l: forall n : nat, 0 * n = 0
mult_n_O: forall n : nat, 0 = n * 0
Nat.square_spec: forall n : nat, Nat.square n = n * n
Nat.sqrt_square: forall a : nat, Nat.sqrt (a * a) = a
Nat.mul_comm: forall n m : nat, n * m = m * n
Nat.mul_1_r: forall n : nat, n * 1 = n
mult_tail_mult: forall n m : nat, n * m = tail_mult n m
Nat.divide_mul_r: forall n m p : nat, Nat.divide n p -> Nat.divide n (m * p)
Nat.divide_mul_l: forall n m p : nat, Nat.divide n m -> Nat.divide n (m * p)
Nat.mul_1_l: forall n : nat, 1 * n = n
Nat.mul_divide_mono_l: forall n m p : nat, Nat.divide n m -> Nat.divide (p * n) (p * m)
Nat.mul_divide_mono_r: forall n m p : nat, Nat.divide n m -> Nat.divide (n * p) (m * p)
mult_le_compat_r: forall n m p : nat, n <= m -> n * p <= m * p
Nat.mul_le_mono_l: forall n m p : nat, n <= m -> p * n <= p * m
Nat.mul_le_mono_r: forall n m p : nat, n <= m -> n * p <= m * p
mult_le_compat_l: forall n m p : nat, n <= m -> p * n <= p * m
Nat.mul_shuffle0: forall n m p : nat, n * m * p = n * p * m
Nat.eq_square_0: forall n : nat, n * n = 0 <-> n = 0
Nat.sqrt_mul_below: forall a b : nat, Nat.sqrt a * Nat.sqrt b <= Nat.sqrt (a * b)
Nat.mul_shuffle3: forall n m p : nat, n * (m * p) = m * (n * p)
Nat.square_le_mono: forall n m : nat, n <= m <-> n * n <= m * m
Nat.square_lt_mono: forall n m : nat, n < m <-> n * n < m * m
Nat.mul_assoc: forall n m p : nat, n * (m * p) = n * m * p
mult_assoc_reverse: forall n m p : nat, n * m * p = n * (m * p)
PeanoNat.Nat.mul_wd_obligation_1: Morphisms.respectful eq (Morphisms.respectful eq eq) Init.Nat.mul Init.Nat.mul
Nat.mul_pos_neg: forall n m : nat, 0 < n -> m < 0 -> n * m < 0
Nat.mul_neg_neg: forall n m : nat, n < 0 -> m < 0 -> 0 < n * m
Nat.mul_pos_pos: forall n m : nat, 0 < n -> 0 < m -> 0 < n * m
Nat.mul_neg_pos: forall n m : nat, n < 0 -> 0 < m -> n * m < 0
Nat.mul_nonneg_nonneg: forall n m : nat, 0 <= n -> 0 <= m -> 0 <= n * m
ArithRing.natSRth: Ring_theory.semi_ring_theory 0 1 Init.Nat.add Init.Nat.mul eq
Nat.sqrt_lt_square: forall a b : nat, a < b * b <-> Nat.sqrt a < b
Nat.div2_double: forall n : nat, Nat.div2 (2 * n) = n
Nat.double_twice: forall n : nat, Nat.double n = 2 * n
Nat.sqrt_le_square: forall a b : nat, b * b <= a <-> b <= Nat.sqrt a
Nat.mul_succ_r: forall n m : nat, n * S m = n * m + n
Nat.pow_2_r: forall a : nat, a ^ 2 = a * a
Nat.sqrt_up_square: forall a : nat, 0 <= a -> Nat.sqrt_up (a * a) = a
Nat.mul_pred_r: forall n m : nat, n * Nat.pred m = n * m - n
Nat.mul_succ_l: forall n m : nat, S n * m = n * m + m
Nat.pow_mul_r: forall a b c : nat, a ^ (b * c) = (a ^ b) ^ c
mult_n_Sm: forall n m : nat, n * m + n = n * S m
Nat.pow_succ_r': forall a b : nat, a ^ S b = a * a ^ b
Nat.square_le_simpl_nonneg: forall n m : nat, 0 <= m -> n * n <= m * m -> n <= m
mult_O_le: forall n m : nat, m = 0 \/ n <= m * n
Nat.div2_succ_double: forall n : nat, Nat.div2 (S (2 * n)) = n
mult_acc_aux: forall n m p : nat, m + n * p = mult_acc m p n
Nat.square_le_mono_nonneg: forall n m : nat, 0 <= n -> n <= m -> n * n <= m * m
Nat.mul_pos_cancel_l: forall n m : nat, 0 < n -> 0 < n * m <-> 0 < m
Nat.mul_lt_mono: forall n m p q : nat, n < m -> p < q -> n * p < m * q
mult_S_lt_compat_l: forall n m p : nat, m < p -> S n * m < S n * p
Nat.mul_pos_cancel_r: forall n m : nat, 0 < m -> 0 < n * m <-> 0 < n
Nat.mul_le_mono: forall n m p q : nat, n <= m -> p <= q -> n * p <= m * q
mult_S_le_reg_l: forall n m p : nat, S n * m <= S n * p -> m <= p
IHn: nth_member a_0 d (S n) = a_0 + d * S n
mult_le_compat: forall n m p q : nat, n <= m -> p <= q -> n * p <= m * q
Nat.mul_le_mono_nonpos_l: forall n m p : nat, p <= 0 -> n <= m -> p * m <= p * n
Nat.gcd_mul_mono_r: forall n m p : nat, Nat.gcd (n * p) (m * p) = Nat.gcd n m * p
mult_lt_compat_r: forall n m p : nat, n < m -> 0 < p -> n * p < m * p
Nat.mul_le_mono_nonneg_r: forall n m p : nat, 0 <= p -> n <= m -> n * p <= m * p
Nat.mul_max_distr_r: forall n m p : nat, Nat.max (n * p) (m * p) = Nat.max n m * p
Nat.lcm_mul_mono_r: forall n m p : nat, Nat.lcm (n * p) (m * p) = Nat.lcm n m * p
Nat.lcm_mul_mono_l: forall n m p : nat, Nat.lcm (p * n) (p * m) = p * Nat.lcm n m
Nat.gcd_add_mult_diag_r: forall n m p : nat, Nat.gcd n (m + p * n) = Nat.gcd n m
Nat.gcd_mul_diag_l: forall n m : nat, 0 <= n -> Nat.gcd n (n * m) = n
Nat.mul_le_mono_nonneg_l: forall n m p : nat, 0 <= p -> n <= m -> p * n <= p * m
Nat.pow_mul_l: forall a b c : nat, (a * b) ^ c = a ^ c * b ^ c
Nat.mul_sub_distr_r: forall n m p : nat, (n - m) * p = n * p - m * p
Nat.mul_min_distr_r: forall n m p : nat, Nat.min (n * p) (m * p) = Nat.min n m * p
Nat.mul_max_distr_l: forall n m p : nat, Nat.max (p * n) (p * m) = p * Nat.max n m
Nat.mul_sub_distr_l: forall n m p : nat, p * (n - m) = p * n - p * m
Nat.mul_min_distr_l: forall n m p : nat, Nat.min (p * n) (p * m) = p * Nat.min n m
Nat.gcd_mul_mono_l: forall n m p : nat, Nat.gcd (p * n) (p * m) = p * Nat.gcd n m
mult_lt_compat_l: forall n m p : nat, n < m -> 0 < p -> p * n < p * m
Nat.mul_add_distr_l: forall n m p : nat, n * (m + p) = n * m + n * p
Nat.mul_add_distr_r: forall n m p : nat, (n + m) * p = n * p + m * p
Nat.mul_le_mono_nonpos_r: forall n m p : nat, p <= 0 -> n <= m -> m * p <= n * p
Nat2Z.inj_mul: forall n m : nat, Z.of_nat (n * m) = (Z.of_nat n * Z.of_nat m)%Z
Nat.odd_mul: forall n m : nat, Nat.odd (n * m) = (Nat.odd n && Nat.odd m)%bool
Nnat.N2Nat.inj_mul: forall a a' : N, N.to_nat (a * a') = N.to_nat a * N.to_nat a'
Zabs2Nat.inj_mul: forall n m : Z, Z.abs_nat (n * m) = Z.abs_nat n * Z.abs_nat m
Nat.sqrt_mul_above: forall a b : nat, Nat.sqrt (a * b) < S (Nat.sqrt a) * S (Nat.sqrt b)
Nat.square_lt_simpl_nonneg: forall n m : nat, 0 <= m -> n * n < m * m -> n < m
Nnat.Nat2N.inj_mul: forall n n' : nat, N.of_nat (n * n') = (N.of_nat n * N.of_nat n')%N
Pos2Nat.inj_mul: forall p q : positive, Pos.to_nat (p * q) = Pos.to_nat p * Pos.to_nat q
Nat.even_mul: forall n m : nat, Nat.even (n * m) = (Nat.even n || Nat.even m)%bool
Nat.square_lt_mono_nonneg: forall n m : nat, 0 <= n -> n < m -> n * n < m * m
Nat.mul_nonneg_cancel_r: forall n m : nat, 0 < m -> 0 <= n * m <-> 0 <= n
Nat.mul_nonneg_cancel_l: forall n m : nat, 0 < n -> 0 <= n * m <-> 0 <= m
f_equal2_mult: forall x1 y1 x2 y2 : nat, x1 = y1 -> x2 = y2 -> x1 * x2 = y1 * y2
mult_is_O: forall n m : nat, n * m = 0 -> n = 0 \/ m = 0
Nat.mul_shuffle1: forall n m p q : nat, n * m * (p * q) = n * p * (m * q)
Nat.mul_shuffle2: forall n m p q : nat, n * m * (p * q) = n * q * (m * p)
Pmult_nat_mult: forall (p : positive) (n : nat), Pos.iter_op Init.Nat.add p n = Pos.to_nat p * n
Nat.lt_1_mul_pos: forall n m : nat, 1 < n -> 0 < m -> 1 < n * m
Nat.eq_mul_0_r: forall n m : nat, n * m = 0 -> n <> 0 -> m = 0
Nat.div_mul: forall a b : nat, b <> 0 -> a * b / b = a
Nat.mul_eq_0_l: forall n m : nat, n * m = 0 -> m <> 0 -> n = 0
Nat.eq_mul_0_l: forall n m : nat, n * m = 0 -> m <> 0 -> n = 0
Nat.mod_mul: forall a b : nat, b <> 0 -> (a * b) mod b = 0
Nat.testbit_even_0: forall a : nat, Nat.testbit (2 * a) 0 = false
Nat.lt_0_mul': forall n m : nat, 0 < n * m <-> 0 < n /\ 0 < m
Nat.mul_eq_0_r: forall n m : nat, n * m = 0 -> n <> 0 -> m = 0
Nat.pow_add_r: forall a b c : nat, a ^ (b + c) = a ^ b * a ^ c
Nat.mul_lt_mono_pos_r: forall p n m : nat, 0 < p -> n < m <-> n * p < m * p
Nat.mul_lt_mono_pos_l: forall p n m : nat, 0 < p -> n < m <-> p * n < p * m
Nat.mul_lt_mono_neg_r: forall p n m : nat, p < 0 -> n < m <-> m * p < n * p
Nat.mul_lt_mono_neg_l: forall p n m : nat, p < 0 -> n < m <-> p * m < p * n
Nat.sqrt_up_succ_square: forall a : nat, 0 <= a -> Nat.sqrt_up (S (a * a)) = S a
Nat.mul_wd: Morphisms.Proper (Morphisms.respectful eq (Morphisms.respectful eq eq)) Init.Nat.mul
Nat.gcd_div_swap: forall a b : nat, a / Nat.gcd a b * b = a * (b / Nat.gcd a b)
Nat.mul_div_le: forall a b : nat, b <> 0 -> b * (a / b) <= a
Nat.shiftl_mul_pow2: forall a n : nat, Nat.shiftl a n = a * 2 ^ n
Nat.eq_mul_0: forall n m : nat, n * m = 0 <-> n = 0 \/ m = 0
Pos2Nat.inj_xO: forall p : positive, Pos.to_nat p~0 = 2 * Pos.to_nat p
Nnat.Nat2N.inj_double: forall n : nat, N.of_nat (2 * n) = N.double (N.of_nat n)
Nat.mul_eq_0: forall n m : nat, n * m = 0 <-> n = 0 \/ m = 0
Nnat.N2Nat.inj_double: forall a : N, N.to_nat (N.double a) = 2 * N.to_nat a
Nat.double_bits_succ: forall a n : nat, Nat.testbit (2 * a) (S n) = Nat.testbit a n
Nat.mul_le_mono_neg_l: forall n m p : nat, p < 0 -> n <= m <-> p * m <= p * n
Nat.testbit_even_succ': forall a n : nat, Nat.testbit (2 * a) (S n) = Nat.testbit a n
Nat.mul_le_mono_pos_l: forall n m p : nat, 0 < p -> n <= m <-> p * n <= p * m
Nat.mul_le_mono_neg_r: forall n m p : nat, p < 0 -> n <= m <-> m * p <= n * p
Nat.sqrt_up_mul_above:
  forall a b : nat, 0 <= a -> 0 <= b -> Nat.sqrt_up (a * b) <= Nat.sqrt_up a * Nat.sqrt_up b
Nat.mul_le_mono_pos_r: forall n m p : nat, 0 < p -> n <= m <-> n * p <= m * p
Nat.pow_succ_r: forall a b : nat, 0 <= b -> a ^ S b = a * a ^ b
Pos2Nat.inj_xI: forall p : positive, Pos.to_nat p~1 = S (2 * Pos.to_nat p)
Zabs2Nat.inj_mul_abs: forall n m : Z, Z.abs_nat (Z.abs n * Z.abs m) = Z.abs_nat n * Z.abs_nat m
Nat.log2_double: forall a : nat, 0 < a -> Nat.log2 (2 * a) = S (Nat.log2 a)
Nat.even_add_mul_even: forall n m p : nat, Nat.Even m -> Nat.even (n + m * p) = Nat.even n
Nnat.N2Nat.inj_succ_double: forall a : N, N.to_nat (N.succ_double a) = S (2 * N.to_nat a)
Nat.log2_up_double: forall a : nat, 0 < a -> Nat.log2_up (2 * a) = S (Nat.log2_up a)
Nat.odd_add_mul_even: forall n m p : nat, Nat.Even m -> Nat.odd (n + m * p) = Nat.odd n
Nnat.Nat2N.inj_succ_double: forall n : nat, N.of_nat (S (2 * n)) = N.succ_double (N.of_nat n)
Nat.sqrt_up_le_square: forall a b : nat, 0 <= a -> 0 <= b -> a <= b * b <-> Nat.sqrt_up a <= b
Nat.even_add_mul_2: forall n m : nat, Nat.even (n + 2 * m) = Nat.even n
Nat.odd_add_mul_2: forall n m : nat, Nat.odd (n + 2 * m) = Nat.odd n
Nat.mul_succ_div_gt: forall a b : nat, b <> 0 -> a < b * S (a / b)
Nat.log2_up_mul_above:
  forall a b : nat, 0 <= a -> 0 <= b -> Nat.log2_up (a * b) <= Nat.log2_up a + Nat.log2_up b
Nat.add_sqrt_le: forall a b : nat, Nat.sqrt a + Nat.sqrt b <= Nat.sqrt (2 * (a + b))
Nat.testbit_odd_0: forall a : nat, Nat.testbit (2 * a + 1) 0 = true
Nat.div_unique_exact: forall a b q : nat, b <> 0 -> a = b * q -> q = a / b
mult_is_one: forall n m : nat, n * m = 1 -> n = 1 /\ m = 1
Nat.add_le_mul: forall a b : nat, 1 < a -> 1 < b -> a + b <= a * b
Nat.div_le_upper_bound: forall a b q : nat, b <> 0 -> a <= b * q -> a / b <= q
Nat.mul_cancel_l: forall n m p : nat, p <> 0 -> p * n = p * m <-> n = m
Nat.mul_id_r: forall n m : nat, n <> 0 -> n * m = n <-> m = 1
Nat.gauss: forall n m p : nat, Nat.divide n (m * p) -> Nat.gcd n m = 1 -> Nat.divide n p
Nat.double_above: forall n m : nat, n < m -> 2 * n + 1 < 2 * m
Nat.div_le_lower_bound: forall a b q : nat, b <> 0 -> b * q <= a -> q <= a / b
Nat.mul_2_mono_l: forall n m : nat, n < m -> 1 + 2 * n < 2 * m
Nat.mul_id_l: forall n m : nat, m <> 0 -> n * m = m <-> n = 1
Nat.div2_odd: forall a : nat, a = 2 * Nat.div2 a + Nat.b2n (Nat.odd a)
Nat.sqrt_up_lt_square: forall a b : nat, 0 <= a -> 0 <= b -> b * b < a <-> b < Nat.sqrt_up a
Nat.mul_le_mono_nonneg: forall n m p q : nat, 0 <= n -> n <= m -> 0 <= p -> p <= q -> n * p <= m * q
Nat.div_lt_upper_bound: forall a b q : nat, b <> 0 -> a < b * q -> a / b < q
Nat.mul_cancel_r: forall n m p : nat, p <> 0 -> n * p = m * p <-> n = m
Nat.mul_divide_cancel_r: forall n m p : nat, p <> 0 -> Nat.divide (n * p) (m * p) <-> Nat.divide n m
Nat.add_b2n_double_bit0: forall (a0 : bool) (a : nat), Nat.testbit (Nat.b2n a0 + 2 * a) 0 = a0
Nat.sqrt_spec': forall a : nat, Nat.sqrt a * Nat.sqrt a <= a < S (Nat.sqrt a) * S (Nat.sqrt a)
Nat.add_square_le: forall a b : nat, 0 <= a -> 0 <= b -> a * a + b * b <= (a + b) * (a + b)
Nat.crossmul_le_addsquare: forall a b : nat, 0 <= a -> 0 <= b -> b * a + a * b <= a * a + b * b
Nat.mod_unique: forall a b q r : nat, r < b -> a = b * q + r -> r = a mod b
Nat.log2_mul_below: forall a b : nat, 0 < a -> 0 < b -> Nat.log2 a + Nat.log2 b <= Nat.log2 (a * b)
Nat.div_mul_le: forall a b c : nat, b <> 0 -> c * (a / b) <= c * a / b
odd_even_lem: forall p q : nat, 2 * p + 1 <> 2 * q
Nat.mul_divide_cancel_l: forall n m p : nat, p <> 0 -> Nat.divide (p * n) (p * m) <-> Nat.divide n m
Nat.div_unique: forall a b q r : nat, r < b -> a = b * q + r -> q = a / b
Nat.sqrt_specif: forall n : nat, Nat.sqrt n * Nat.sqrt n <= n < S (Nat.sqrt n) * S (Nat.sqrt n)
Nat.testbit_0_r: forall (a : nat) (b : bool), Nat.testbit (2 * a + Nat.b2n b) 0 = b
Nat.mod_add: forall a b c : nat, c <> 0 -> (a + b * c) mod c = a mod c
Nat.mul_mod_idemp_l: forall a b n : nat, n <> 0 -> (a mod n * b) mod n = (a * b) mod n
Nat.sqrt_sqrt_up_spec: forall a : nat, 0 <= a -> Nat.sqrt a * Nat.sqrt a <= a <= Nat.sqrt_up a * Nat.sqrt_up a
Nat.mul_mod_idemp_r: forall a b n : nat, n <> 0 -> (a * (b mod n)) mod n = (a * b) mod n
Nat.sqrt_up_mul_below:
  forall a b : nat, 0 < a -> 0 < b -> Nat.pred (Nat.sqrt_up a) * Nat.pred (Nat.sqrt_up b) < Nat.sqrt_up (a * b)
Nat.mod_eq: forall a b : nat, b <> 0 -> a mod b = a - b * (a / b)
Nat.eq_mul_1: forall n m : nat, n * m = 1 <-> n = 1 /\ m = 1
Nat.testbit_odd_succ': forall a n : nat, Nat.testbit (2 * a + 1) (S n) = Nat.testbit a n
Nat.testbit_even_succ: forall a n : nat, 0 <= n -> Nat.testbit (2 * a) (S n) = Nat.testbit a n
Nat.neq_mul_0: forall n m : nat, n <> 0 /\ m <> 0 <-> n * m <> 0
Nat.div_mod: forall x y : nat, y <> 0 -> x = y * (x / y) + x mod y
Nat.double_below: forall n m : nat, n <= m -> 2 * n < 2 * m + 1
Nat.mul_eq_1: forall n m : nat, n * m = 1 <-> n = 1 /\ m = 1
Nat.mul_lt_mono_nonneg: forall n m p q : nat, 0 <= n -> n < m -> 0 <= p -> p < q -> n * p < m * q
Nat.log2_succ_double: forall a : nat, 0 < a -> Nat.log2 (2 * a + 1) = S (Nat.log2 a)
IHn0: nth_member a_0 d n = a_0 + d * n -> d + nth_member a_0 d n = a_0 + d * S n
Z2Nat.inj_mul: forall n m : Z, (0 <= n)%Z -> (0 <= m)%Z -> Z.to_nat (n * m) = Z.to_nat n * Z.to_nat m
Nat.add_b2n_double_div2: forall (a0 : bool) (a : nat), (Nat.b2n a0 + 2 * a) / 2 = a
Nat.ones_add: forall n m : nat, Nat.ones (m + n) = 2 ^ m * Nat.ones n + Nat.ones m
Nat.mul_mod: forall a b n : nat, n <> 0 -> (a * b) mod n = (a mod n * (b mod n)) mod n
Nat.div_add_l: forall a b c : nat, b <> 0 -> (a * b + c) / b = a + c / b
Nat.div_add: forall a b c : nat, c <> 0 -> (a + b * c) / c = a / c + b
Nat.log2_mul_above: forall a b : nat, 0 <= a -> 0 <= b -> Nat.log2 (a * b) <= Nat.log2 a + Nat.log2 b + 1
Nat.log2_up_mul_below:
  forall a b : nat, 0 < a -> 0 < b -> Nat.log2_up a + Nat.log2_up b <= S (Nat.log2_up (a * b))
Nat.log2_up_same: forall a b : nat, 0 < a -> 0 < b -> Nat.log2_up a = Nat.log2_up b -> a < 2 * b
Nat.sqrt_unique: forall a b : nat, b * b <= a < S b * S b -> Nat.sqrt a = b
Nat.lt_0_mul: forall n m : nat, 0 < n * m <-> 0 < n /\ 0 < m \/ m < 0 /\ n < 0
Nat.log2_same: forall a b : nat, 0 < a -> 0 < b -> Nat.log2 a = Nat.log2 b -> a < 2 * b
Nat.exists_div2: forall a : nat, exists (a' : nat) (b : bool), a = 2 * a' + Nat.b2n b
Nat.div_mul_cancel_r: forall a b c : nat, b <> 0 -> c <> 0 -> a * c / (b * c) = a / b
Nat.div_exact: forall a b : nat, b <> 0 -> a = b * (a / b) <-> a mod b = 0
Nat.mul_pow2_bits_add: forall a n m : nat, Nat.testbit (a * 2 ^ n) (m + n) = Nat.testbit a m
Nat.divide_div_mul_exact: forall a b c : nat, b <> 0 -> Nat.divide b a -> c * a / b = c * (a / b)
Nat.div_mul_cancel_l: forall a b c : nat, b <> 0 -> c <> 0 -> c * a / (c * b) = a / b
Nat.eq_mul_1_nonneg: forall n m : nat, 0 <= n -> n * m = 1 -> n = 1 /\ m = 1
Nat.div_div: forall a b c : nat, b <> 0 -> c <> 0 -> a / b / c = a / (b * c)
Nat.eq_mul_1_nonneg': forall n m : nat, 0 <= m -> n * m = 1 -> n = 1 /\ m = 1
Nat.add_log2_lt: forall a b : nat, 0 < a -> 0 < b -> Nat.log2 a + Nat.log2 b < 2 * Nat.log2 (a + b)
List.prod_length:
  forall (A B : Type) (l : list A) (l' : list B), length (List.list_prod l l') = length l * length l'
Nat.testbit_succ_r:
  forall (a : nat) (b : bool) (n : nat), Nat.testbit (2 * a + Nat.b2n b) (S n) = Nat.testbit a n
Nat.add_log2_up_lt: forall a b : nat, 0 < a -> 0 < b -> Nat.log2_up a + Nat.log2_up b < 2 * Nat.log2_up (a + b)
Nat.mod_divides: forall a b : nat, b <> 0 -> a mod b = 0 <-> (exists c : nat, a = b * c)
Nat.lcm_equiv2: forall a b : nat, Nat.gcd a b <> 0 -> a / Nat.gcd a b * b = a * b / Nat.gcd a b
Nat.lcm_equiv1: forall a b : nat, Nat.gcd a b <> 0 -> a * (b / Nat.gcd a b) = a * b / Nat.gcd a b
Nat.sqrt_spec: forall a : nat, 0 <= a -> Nat.sqrt a * Nat.sqrt a <= a < S (Nat.sqrt a) * S (Nat.sqrt a)
Nat.mul_pow2_bits_low: forall a n m : nat, m < n -> Nat.testbit (a * 2 ^ n) m = false
Nat.sqrt_up_spec:
  forall a : nat,
  0 < a -> Nat.pred (Nat.sqrt_up a) * Nat.pred (Nat.sqrt_up a) < a <= Nat.sqrt_up a * Nat.sqrt_up a
Nat.mul_mod_distr_r: forall a b c : nat, b <> 0 -> c <> 0 -> (a * c) mod (b * c) = a mod b * c
Nat.mul_mod_distr_l: forall a b c : nat, b <> 0 -> c <> 0 -> (c * a) mod (c * b) = c * (a mod b)
Nat.add_sqrt_up_le:
  forall a b : nat, 0 <= a -> 0 <= b -> Nat.sqrt_up a + Nat.sqrt_up b <= S (Nat.sqrt_up (2 * (a + b)))
Nat.testbit_odd_succ: forall a n : nat, 0 <= n -> Nat.testbit (2 * a + 1) (S n) = Nat.testbit a n
Nat2Pos.inj_mul:
  forall n m : nat, n <> 0 -> m <> 0 -> Pos.of_nat (n * m) = (Pos.of_nat n * Pos.of_nat m)%positive
Nat.square_add_le: forall a b : nat, 0 <= a -> 0 <= b -> (a + b) * (a + b) <= 2 * (a * a + b * b)
Nat.log2_up_succ_double: forall a : nat, 0 < a -> Nat.log2_up (2 * a + 1) = 2 + Nat.log2 a
Nat.quadmul_le_squareadd: forall a b : nat, 0 <= a -> 0 <= b -> 2 * 2 * a * b <= (a + b) * (a + b)
Nat.sqrt_up_unique: forall a b : nat, 0 < b -> Nat.pred b * Nat.pred b < a <= b * b -> Nat.sqrt_up a = b
Nat.mul_lt_pred: forall p q n m : nat, S p = q -> p * n < p * m <-> q * n + m < q * m + n
Nat.mul_pow2_bits_high: forall a n m : nat, n <= m -> Nat.testbit (a * 2 ^ n) m = Nat.testbit a (m - n)
Nat.log2_up_mul_pow2: forall a b : nat, 0 < a -> 0 <= b -> Nat.log2_up (a * 2 ^ b) = b + Nat.log2_up a
Nat.log2_mul_pow2: forall a b : nat, 0 < a -> 0 <= b -> Nat.log2 (a * 2 ^ b) = b + Nat.log2 a
ArithRing.nat_morph_N:
  Ring_theory.semi_morph 0 1 Init.Nat.add Init.Nat.mul eq 0%N 1%N N.add N.mul N.eqb N.to_nat
Nat.sqrt_sqrt_up_exact:
  forall a : nat, 0 <= a -> Nat.sqrt a = Nat.sqrt_up a <-> (exists b : nat, 0 <= b /\ a = b * b)
Nat.div_mod_unique:
  forall b q1 q2 r1 r2 : nat, r1 < b -> r2 < b -> b * q1 + r1 = b * q2 + r2 -> q1 = q2 /\ r1 = r2
Nat.gcd_1_lcm_mul: forall n m : nat, n <> 0 -> m <> 0 -> Nat.gcd n m = 1 <-> Nat.lcm n m = n * m
Nat.sqrt_up_eq_succ_iff_square:
  forall a : nat, 0 <= a -> Nat.sqrt_up (S a) = S (Nat.sqrt_up a) <-> (exists b : nat, 0 <= b /\ a = b * b)
Nat.mod_mul_r: forall a b c : nat, b <> 0 -> c <> 0 -> a mod (b * c) = a mod b + b * ((a / b) mod c)
Nat.pow_add_upper: forall a b c : nat, c <> 0 -> (a + b) ^ c <= 2 ^ Nat.pred c * (a ^ c + b ^ c)
Nat.divide_mul_split:
  forall n m p : nat,
  n <> 0 -> Nat.divide n (m * p) -> exists q r : nat, n = q * r /\ Nat.divide q m /\ Nat.divide r p
Nat.testbit_unique:
  forall (a n : nat) (a0 : bool) (l h : nat),
  l < 2 ^ n -> a = l + (Nat.b2n a0 + 2 * h) * 2 ^ n -> Nat.testbit a n = a0
Nat.divmod_spec:
  forall x y q u : nat,
  u <= y -> let (q', u') := Nat.divmod x y q u in x + S y * q + (y - u) = S y * q' + (y - u') /\ u' <= y
Nat.sqrt_iter_spec:
  forall k p q r : nat,
  q = p + p -> r <= q -> let s := Nat.sqrt_iter k p q r in s * s <= k + p * p + (q - r) < S s * S s
Nat.testbit_spec:
  forall a n : nat, exists l h : nat, 0 <= l < 2 ^ n /\ a = l + (Nat.b2n (Nat.testbit a n) + 2 * h) * 2 ^ n
ArithRing.natr_ring_lemma2:
  forall (n : nat) (lH : list (Ring_polynom.PExpr N * Ring_polynom.PExpr N)) (l : list nat),
  Ring_polynom.interp_PElist 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) eq N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l lH ->
  forall lmp : list (N * Ring_polynom.Mon * Ring_polynom.Pol N),
  Ring_polynom.mk_monpol_list 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl lH = lmp ->
  forall (pe : Ring_polynom.PExpr N) (npe : Ring_polynom.Pol N),
  Ring_polynom.norm_subst 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl n lmp pe = npe ->
  Ring_polynom.PEeval 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l pe =
  Ring_polynom.Pphi_dev 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) 0%N 1%N N.eqb N.to_nat (Ring_theory.get_sign_None (C:=N)) l npe
ArithRing.natr_ring_lemma1:
  forall (n : nat) (l : list nat) (lpe : list (Ring_polynom.PExpr N * Ring_polynom.PExpr N))
    (pe1 pe2 : Ring_polynom.PExpr N),
  Ring_polynom.interp_PElist 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) eq N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l lpe ->
  (let lmp := Ring_polynom.mk_monpol_list 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl lpe in
   Ring_polynom.Peq N.eqb
     (Ring_polynom.norm_subst 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl n lmp pe1)
     (Ring_polynom.norm_subst 0%N 1%N N.add N.mul N.add (fun x : N => x) N.eqb N.div_eucl n lmp pe2)) = true ->
  Ring_polynom.PEeval 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l pe1 =
  Ring_polynom.PEeval 0 1 Init.Nat.add Init.Nat.mul (Ring_theory.SRsub Init.Nat.add)
    (Ring_theory.SRopp (R:=nat)) N.to_nat Ring_theory.id_phi_N (Ring_theory.pow_N 1 Init.Nat.mul) l pe2
